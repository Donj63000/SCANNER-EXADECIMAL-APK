name: Android CI

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  apk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept licenses
        run: yes | sdkmanager --licenses

      - name: Install Android packages (API 35)
        run: |
          sdkmanager --install "platform-tools" "cmdline-tools;latest" \
            "platforms;android-35" "build-tools;35.0.0"

      # --- Génère le wrapper en offline-friendly (avec SHA) + retries + fallback domaine ---
      - name: Generate Gradle Wrapper (no binary in git, offline-friendly)
        env:
          GRADLE_VERSION: "8.13"
        run: |
          set -euo pipefail
          mkdir -p gradle/wrapper

          URL_PRIMARY="https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip"
          URL_FALLBACK="https://downloads.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip"

          # Téléchargement robuste (5 tentatives, fallback)
          for TRY in 1 2 3 4 5; do
            echo "Try $TRY: downloading Gradle from primary CDN..."
            if curl -fL --retry 3 --retry-delay 3 --retry-connrefused -o gradle.zip "${URL_PRIMARY}"; then
              break
            fi
            echo "Primary failed. Trying fallback CDN..."
            if curl -fL --retry 3 --retry-delay 3 --retry-connrefused -o gradle.zip "${URL_FALLBACK}"; then
              break
            fi
            sleep $((TRY*2))
          done

          unzip -q gradle.zip -d "${HOME}/gradle"
          SHA=$(sha256sum gradle.zip | awk '{print $1}')

          # Génère le wrapper localement
          "${HOME}/gradle/gradle-${GRADLE_VERSION}/bin/gradle" wrapper --gradle-version ${GRADLE_VERSION}

          # Injecte l'URL et le SHA pour permettre une validation SANS réseau
          PROP=gradle/wrapper/gradle-wrapper.properties
          sed -i '/^distributionUrl=/d;/^distributionSha256Sum=/d' "$PROP" || true
          echo "distributionUrl=https\\://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip" >> "$PROP"
          echo "distributionSha256Sum=${SHA}" >> "$PROP"

          chmod +x gradlew

      # La validation wrapper peut encore requérir du réseau -> on ne bloque pas la livraison
      - name: Validate Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v3
        continue-on-error: true
        timeout-minutes: 2

      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v4

      # On assemble l'APK même si la validation a "jauni" (non bloquante)
      - name: Assemble Debug APK (no tests)
        run: |
          ./gradlew :app:assembleDebug -x test --stacktrace --info

      - name: Upload Debug APK (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-${{ github.sha }}
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Prepare release asset
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          mkdir -p dist
          cp app/build/outputs/apk/debug/app-debug.apk dist/SCANNER-EXADECIMAL-debug.apk

      - name: Publish/Update "nightly" Release (debug APK)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/SCANNER-EXADECIMAL-debug.apk
          asset_name: SCANNER-EXADECIMAL-debug.apk
          tag: nightly
          release_name: Nightly Debug
          overwrite: true
          body: "Commit ${{ github.sha }} — APK debug (keystore debug)."

  quality:
    runs-on: ubuntu-latest
    needs: apk
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: "17" }
      - uses: android-actions/setup-android@v3
      - run: yes | sdkmanager --licenses
      - run: sdkmanager --install "platform-tools" "cmdline-tools;latest" "platforms;android-35" "build-tools;35.0.0"

      - name: Generate Gradle Wrapper (no binary in git)
        env: { GRADLE_VERSION: "8.13" }
        run: |
          curl -fL --retry 5 --retry-delay 4 --retry-connrefused -o gradle.zip "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip"
          unzip -q gradle.zip -d "${HOME}/gradle"
          "${HOME}/gradle/gradle-${GRADLE_VERSION}/bin/gradle" wrapper --gradle-version ${GRADLE_VERSION}
          chmod +x gradlew

      - uses: gradle/actions/setup-gradle@v4
      - name: Tests & Lint (non bloquant)
        run: ./gradlew :imagequality:testDebugUnitTest :app:lintDebug --stacktrace --info || true

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports-${{ github.run_id }}
          path: |
            **/build/reports/**
            **/build/test-results/**
          if-no-files-found: ignore
